name: Code Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies
      - name: Install Stylelint
        run: npm install stylelint --save-dev  

      - name: Fix Stylelint Permissions
        run: chmod +x ./node_modules/.bin/stylelint

      - name: Install HTMLHint
        run: npm install htmlhint --save-dev

      - name: Fix HTMLHint Permissions
        run: chmod +x ./node_modules/.bin/htmlhint

      # Run Stylelint for CSS (kept in case you need it)
      - name: Run Stylelint for CSS
        id: lint-css
        run: |
          lint_output=$(npx stylelint "**/*.css" || true)
          echo "$lint_output"

      # Run HTMLHint and Extract Errors
      - name: Run HTMLHint and Extract Errors
        id: lint-html
        run: |
          echo "Running HTMLHint..."
          # Run HTMLHint and capture output
          lint_output=$(npx htmlhint "**/*.html" --ignore "vendor/**" || true)

          # Print full raw output for debugging
          echo "Full HTMLHint Output:"
          echo "$lint_output"

          # Extract only errors (using regex to capture errors)
          errors=$(echo "$lint_output" | grep -E ".*L[0-9]+.*error.*" || true)

          # Check if errors were found and format them as a list
          if [ -z "$errors" ]; then
            echo "No HTML errors found."
            echo "html_errors=None" >> $GITHUB_ENV
          else
            # Format the errors as a bullet-point list
            formatted_errors=$(echo "$errors" | sed 's/^/ - /')

            # Store formatted errors in environment variable
            echo "HTML Errors Found:" >> $GITHUB_ENV
            echo "$formatted_errors" >> $GITHUB_ENV
            echo "html_errors<<EOF" >> $GITHUB_ENV
            echo "$formatted_errors" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      # Run tests (placeholder)
      - name: Run tests
        run: echo "No tests configured yet"

      # Send email notification with HTML linting errors
      - name: Send Email Notification
        run: |
          echo "Sending email notification for repository update."
          sudo apt-get install msmtp -y

          # Configuring msmtp to send mail via SMTP
          echo "account default" > ~/.msmtprc
          echo "host smtp.gmail.com" >> ~/.msmtprc
          echo "port 587" >> ~/.msmtprc
          echo "auth on" >> ~/.msmtprc
          echo "user ${{ secrets.SMTP_USER }}" >> ~/.msmtprc
          echo "password ${{ secrets.SMTP_PASSWORD }}" >> ~/.msmtprc
          echo "from ${{ secrets.SMTP_FROM_EMAIL }}" >> ~/.msmtprc
          echo "tls on" >> ~/.msmtprc
          echo "logfile ~/.msmtp.log" >> ~/.msmtprc

          # Set file permissions
          chmod 600 ~/.msmtprc          

          # Send email with formatted HTML errors if any
          if [ "${{ env.html_errors }}" != "None" ]; then
            echo -e "Subject: HTML Linting Report\n\nThe following HTML errors were found:\n\n${{ env.html_errors }}" | msmtp ${{ secrets.RECIPIENT_EMAIL }}
          else
            echo "No HTML errors found. âœ…"
          fi
