name: Code Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  code-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Get Commit Author Email
      - name: Get Commit Author Email
        id: get-email
        run: |
          email=$(git log -1 --pretty=format:'%ae')
          echo "COMMIT_AUTHOR_EMAIL=$email" >> $GITHUB_ENV
          echo "Commit Author Email: $email"

      # Install Node.js Dependencies (ESLint, Stylelint, HTMLHint)
      - name: Install Node.js Lint Tools
        run: npm install eslint stylelint htmlhint --save-dev

      # Run ESLint for JS/TS (Exclude node_modules and vendor)
      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --ignore-pattern "node_modules/**" --ignore-pattern "vendor/**" --format stylish | tee eslint_output.txt || true

      # Run Stylelint for CSS (Exclude node_modules and vendor)
      - name: Run Stylelint
        run: npx stylelint "**/*.css" --ignore-path ".gitignore" --allow-empty-input | tee stylelint_output.json || true

      # Run HTMLHint for HTML (Exclude node_modules and vendor)
      - name: Run HTMLHint
        run: npx htmlhint "**/*.html" --ignore "node_modules/**" --ignore "vendor/**" | tee htmlhint_output.txt || true

      # Set up PHP for Laravel Pint & PHPUnit
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: json, dom, curl, libxml, mbstring, sqlite3, pdo, pdo_sqlite
          coverage: none

      # Install Composer Dependencies
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # Install Enlightn Security Checker
      - name: Install Enlightn Security Checker
        run: composer require enlightn/security-checker --dev

      # Run Security Vulnerability Check
      - name: Run Security Checker
        run: ./vendor/bin/security-checker security:check | tee security_output.txt || true

      # Set up Laravel Environment & SQLite Database for Testing
      - name: Setup Laravel Environment
        run: |
          cp .env.example .env
          php artisan key:generate
          mkdir -p database
          touch database/database.sqlite
          php artisan migrate --env=testing --force
        continue-on-error: true # If environment setup fails, continue

      # Install Laravel Pint
      - name: Install Pint
        run: composer global require laravel/pint

      # Add Composer Global Bin to Path
      - name: Add Composer Global Bin to Path
        run: echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH

      # Run Laravel Pint (Exclude node_modules and vendor folders)
      - name: Run Laravel Pint
        run: pint --test --config pint.json | tee pint_output.txt || true

      # Run PHPUnit Tests
      - name: Run PHPUnit Tests
        run: php artisan test --testsuite=Feature --testsuite=Unit | tee phpunit_output.txt || true

      # 🛑 Add and Commit Laravel Pint fixes (if any) before pulling to avoid non-fast-forward error
      - name: Commit Pint Fixes Before Pulling
        run: |
          git config --global user.email "ci-bot@github.com"
          git config --global user.name "GitHub Actions Bot"
          git add .
          git commit -m "Apply Pint Fixes" || echo "No changes to commit"

      # 🚀 Pull the latest changes from main with rebase
      - name: Pull Latest Changes from Main
        run: |
          git pull origin main --rebase

      # ✅ Push Laravel Pint Fixes (if any)
      - name: Commit and Push Laravel Pint Fixes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Apply Pint fixes"
          branch: main

      # Send Email Notification if Errors are Found
      - name: Send Email Notification
        if: failure()
        run: |
          echo "Sending email notification for errors..."
          sudo apt-get install msmtp -y

          # Configure msmtp
          echo "account default" > ~/.msmtprc
          echo "host smtp.gmail.com" >> ~/.msmtprc
          echo "port 587" >> ~/.msmtprc
          echo "auth on" >> ~/.msmtprc
          echo "user ${{ secrets.SMTP_USER }}" >> ~/.msmtprc
          echo "password ${{ secrets.SMTP_PASSWORD }}" >> ~/.msmtprc
          echo "from ${{ env.COMMIT_AUTHOR_EMAIL }}" >> ~/.msmtprc
          echo "tls on" >> ~/.msmtprc
          echo "logfile ~/.msmtp.log" >> ~/.msmtprc
          chmod 600 ~/.msmtprc

          # Prepare email content
          message="🔥 Laravel CI Report 🔥\n\n"

          if grep -q "ERROR" eslint_output.txt; then
            message+="🛑 JavaScript Errors:\n$(cat eslint_output.txt)\n\n"
          fi

          if grep -q "ERROR" stylelint_output.json; then
            message+="🎨 CSS Errors:\n$(jq . stylelint_output.json)\n\n"
          fi

          if grep -q "ERROR" htmlhint_output.txt; then
            message+="📄 HTML Errors:\n$(cat htmlhint_output.txt)\n\n"
          fi

          if grep -q "ERROR" pint_output.txt; then
            message+="🐘 PHP Code Style Issues:\n$(cat pint_output.txt)\n\n"
          fi

          if grep -q "FAILURES" phpunit_output.txt; then
            message+="⚡ PHPUnit Test Failures:\n$(cat phpunit_output.txt)\n\n"
          fi

          if [ -s security_output.txt ]; then
            message+="🔒 Vulnerabilities Found:\n$(cat security_output.txt)\n\n"
          fi

          printf "$message" | msmtp ${{ secrets.RECIPIENT_EMAIL }}
